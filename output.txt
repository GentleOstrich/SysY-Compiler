INTTK int
IDENFR g_v
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR f
LPARENT (
RPARENT )
LBRACE {
IDENFR g_v
ASSIGN =
IDENFR g_v
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR f0
LPARENT (
RPARENT )
LBRACE {
IDENFR g_v
ASSIGN =
IDENFR g_v
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
MULT *
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR func0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373302\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373302\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373302\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373302\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373302\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373302\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373302\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR f
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
AND &&
IDENFR f
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR f0
LPARENT (
RPARENT )
AND &&
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR f0
LPARENT (
RPARENT )
AND &&
IDENFR f
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
AND &&
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
OR ||
INTCON 1
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
OR ||
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR f
LPARENT (
RPARENT )
OR ||
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR f
LPARENT (
RPARENT )
OR ||
IDENFR f0
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR g_v
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR inner
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 4
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
INTCON 0
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
INTTK int
IDENFR d
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 1003
RBRACE }
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
NOT !
LPARENT (
LPARENT (
LPARENT (
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 7
RPARENT )
MULT *
INTCON 6
GEQ >=
IDENFR func
LPARENT (
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
RPARENT )
AND &&
LPARENT (
LPARENT (
IDENFR a
PLUS +
INTCON 10
RPARENT )
MULT *
IDENFR func
LPARENT (
IDENFR a
RPARENT )
GRE >
INTCON 12
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "b = !(((d[0] + 7) * 6 >= func(d[2])) && ((a + 10) * func(a) > 12));\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
NOT !
LPARENT (
LPARENT (
LPARENT (
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 7
RPARENT )
MULT *
INTCON 6
GRE >
IDENFR func
LPARENT (
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
RPARENT )
OR ||
LPARENT (
LPARENT (
IDENFR a
PLUS +
INTCON 10
RPARENT )
MULT *
IDENFR func
LPARENT (
IDENFR a
RPARENT )
LEQ <=
INTCON 12
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "int c = !(((d[0] + 7) * 6 > func(d[2])) || ((a + 10) * func(a) <= 12));\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
PLUS +
INTCON 1
PLUS +
INTCON 1
MINU -
INTCON 2
RPARENT )
LBRACE {
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 10
AND &&
INTCON 0
RPARENT )
LBRACE {
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
LPARENT (
INTCON 5
GRE >
INTCON 1
RPARENT )
AND &&
LPARENT (
INTCON 5
LEQ <=
INTCON 1
RPARENT )
RPARENT )
LBRACE {
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
LPARENT (
INTCON 0
GEQ >=
INTCON 4
RPARENT )
OR ||
LPARENT (
INTCON 0
LSS <
INTCON 4
RPARENT )
RPARENT )
LBRACE {
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 9
RPARENT )
LBRACE {
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
